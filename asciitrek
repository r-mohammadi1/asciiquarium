#!/usr/bin/env perl
#
#############################################################################
# Asciitrek - A space animation in ASCII art
#
# This program displays a space animationn using ASCII art.
# It requires the module Term::Animation, which requires Curses. You
# can get both modules from http://search.cpan.org. Asciitrek will
# only run on platforms with a curses library, so Windows is not supported.
#
#
#############################################################################
# Original Author:
#   Kirk Baucom <kbaucom@schizoid.com>
# All art is by the author of the fork, r-mohammadi1.
#
# License:
#
# Copyright (C) 2003 Kirk Baucom (kbaucom@schizoid.com)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#############################################################################

use Term::Animation 2.0;
use Term::Animation::Entity;
use Data::Dumper;
use Curses;
use Getopt::Std;
use strict;
use warnings;

my $version = "0.1";
my $new_fish = 1;

our $opt_c;
getopts('c');

if ($opt_c) {			# 'classic' mode
	$new_fish = 0;
}

my @random_objects = init_random_objects();

# the Z depth at which certain items occur
my %depth = (
	# no gui yet
	guiText		=> 0,
	gui		=> 1,

	# under water
	fish_start	=> 3,
	fish_end	=> 20,

	# waterline
	water_line3	=> 2,
	water_gap3	=> 3,
	water_line2	=> 4,
	water_gap2	=> 5,
	water_line1	=> 6,
	water_gap1	=> 7,
	water_line0	=> 8,
	water_gap0	=> 9,
);

main();

####################### MAIN #######################

sub main {

	my $anim = Term::Animation->new();

	# set the wait time for getch
	halfdelay(1);
	#nodelay(1);

	$anim->color(1);

	my $start_time = time;
	my $paused = 0;
	while(1) {

		add_environment($anim);
		add_all_fish($anim);
		
		$anim->redraw_screen();

		my $nexttime = 0;

		while(1) {
			my $in = lc(getch());

			if   ( $in eq 'q' ) { quit(); }   # Exit
			elsif( $in eq 'r' ) { last; }     # Redraw (will recreate all objects)
			elsif( $in eq 'p' ) { $paused = !$paused; }

			$anim->animate() unless($paused);
		}
		$anim->update_term_size();
		$anim->remove_all_entities();

	}

}

sub add_environment {
	my ($anim) = @_;

	my @water_line_segment = (
		q{     .               *    .      },
		q{         *          .            },
		q{       .                    *    },
		q{            +        o           }
	);

	# tile the segments so they stretch across the screen
	my $segment_size = length($water_line_segment[0]);
	my $segment_repeat = int($anim->width()/$segment_size) + 1;
	foreach my $i (0..$#water_line_segment) {
		$water_line_segment[$i] = $water_line_segment[$i]x$segment_repeat;
	}

	foreach my $i (0..$#water_line_segment) {
		$anim->new_entity(
			name		=> "water_seg_$i",
			type		=> "waterline",
			shape		=> $water_line_segment[$i],
			position	=> [ 0, $i+5, $depth{'water_line'  . $i} ],
			default_color	=> 'cyan',
			depth		=> 22,
			physical	=> 1,
		);
	}
}
sub add_all_fish {
	my ($anim) = @_;
	# figure out how many fish to add by the size of the screen,
	# minus the stuff above the water
	my $screen_size = ($anim->height() - 9) * $anim->width();
	my $fish_count = int($screen_size / 350);
	for (1..$fish_count) {
		add_fish(undef, $anim);
	}
}

sub add_fish {
	my @parm = @_;

	if ($new_fish) {
		if (int(rand(12)) > 8) {
			add_new_fish(@parm);
		}
	}
}

sub add_new_fish {
	my ($old_fish, $anim) = @_;
	my @fish_image = (

q{
  ________/|
<|_o__o___|E>~
          \|

},
q{
   |\_______
~<E|___o__o_|>
  |/ 
},
q{
             .+..+.  
     * ~~==/    o \ 
* + --~~=={ o.     |
     + ~~==\      / 
            *----* 
},
q{
  .+..+.
 / o    \==~~ *
{     .o |==~~-- + *
 \ *    /==~~ +
  *----*
},
q{
 O)
/H\
 W
},
q{
(O
/H\
 W
},
);

	add_fish_entity($anim, @fish_image);
}
);

	add_fish_entity($anim, @fish_image);
}

sub add_fish_entity {
	my $anim = shift;
	my @fish_image = @_;
	
	# 1: body
	# 2: dorsal fin
	# 3: flippers
	# 4: eye
	# 5: mouth
	# 6: tailfin
	# 7: gills

	my @colors = ('c','C','r','R','y','Y','b','B','g','G','m','M');
	my $fish_num = int(rand($#fish_image/2));
	my $fish_index = $fish_num * 2;
	my $speed = rand(2) + .25;
	my $depth = int(rand($depth{'fish_end'} - $depth{'fish_start'})) + $depth{'fish_start'};
	my $color_mask = $fish_image[$fish_index+1];
	$color_mask =~ s/4/W/gm;
	$color_mask = rand_color($color_mask);

	if($fish_num % 2) {
		$speed *= -1;
	}
	my $fish_object = Term::Animation::Entity->new(
		type		=> 'fish',
		shape		=> $fish_image[$fish_index],
		auto_trans	=> 1,
		color		=> $color_mask,
		position	=> [ 0, 0, $depth ],
		callback	=> \&fish_callback,
		callback_args	=> [ $speed, 0, 0 ],
		die_offscreen	=> 1,
		death_cb	=> \&add_fish,
		physical	=> 1,
		coll_handler	=> \&fish_collision,
	);

	my $max_height = 9;
	my $min_height = $anim->height() - $fish_object->{'HEIGHT'};
	$fish_object->{'Y'} = int(rand($min_height - $max_height)) + $max_height;
	if($fish_num % 2) {
		$fish_object->{'X'} = $anim->width()-2;
	} else {
		$fish_object->{'X'} = 1 - $fish_object->{'WIDTH'};
	}
	$anim->add_entity($fish_object);
}

sub fish_callback {
	my ($fish, $anim) = @_;
	return $fish->move_entity($anim);
}

sub dprint {
	open(D, ">>", "debug");
	print D @_, "\n";
	close(D);
}

sub sighandler {
	my ($sig) = @_;
	if($sig eq 'INT') { quit(); }
	elsif($sig eq 'WINCH') {
		# ignore SIGWINCH, only redraw when requested
	}
	else { quit("Exiting with SIG$sig"); }
}

sub quit {
	my ($mesg) = @_;
	print STDERR $mesg, "\n" if(defined($mesg));
	exit;
}


sub initialize {
	# this may be paranoid, but i don't want to leave
	# the user's terminal in a state that they might not
	# know how to fix if we die badly
	foreach my $sig (keys %SIG) {
		$SIG{$sig} = 'sighandler' unless(defined($SIG{$sig}));
	}
}


sub center {
	my ($width, $mesg) = @_;
	my $l = length($mesg);
	if($l < $width) {
		return ' 'x(int(($width - length($mesg))/2)) . $mesg;
	}
	elsif($l > $width) {
		return(substr($mesg, 0, ($width - ($l + 3))) . "...");
	}
	else {
		return $mesg;
	}
}

sub rand_color {
	my ($color_mask) = @_;
	my @colors = ('c','C','r','R','y','Y','b','B','g','G','m','M');
	foreach my $i (1..9) {
		my $color = $colors[int(rand($#colors))];
		$color_mask =~ s/$i/$color/gm;
	}
	return $color_mask;
}

sub VERSION_MESSAGE {
	print "asciitrek $version\n";
	exit;
}
